[
  {
    "comment": "/**\n\t * @constructor\n\t * @param {string} [uri=undefined] The connection string URI.\n\t * @param {Object} [options={}] The options for the database.\n\t * @param {string} [options.namespace=endb] The name of the database.\n\t * @param {Function} [options.serialize=Util#stringify] A custom serialization function.\n\t * @param {Function} [options.deserialize=Util#parse] A custom deserialization function.\n\t * @param {string} [options.adapter] The adapter to be used.\n\t * @param {string} [options.collection=endb] The name of the collection. (only for MongoDB)\n\t * @param {string} [options.table=endb] The name of the table. (only for SQL adapters)\n\t * @param {number} [options.keySize=255] The size of the key. (only for SQL adapters)\n\t * @example\n\t * const endb = new Endb();\n\t * const endb = new Endb({\n\t *     namespace: 'endb',\n\t *     serialize: JSON.stringify,\n\t *     deserialize: JSON.parse\n\t * });\n\t * const endb = new Endb('leveldb://path/to/database');\n\t * const endb = new Endb('mongodb://user:pass@localhost:27017/dbname');\n\t * const endb = new Endb('mysql://user:pass@localhost:3306/dbname');\n\t * const endb = new Endb('postgresql://user:pass@localhost:5432/dbname');\n\t * const endb = new Endb('redis://user:pass@localhost:6379');\n\t * const endb = new Endb('sqlite://path/to/database.sqlite');\n\t *\n\t * // Handles database connection error\n\t * endb.on('error', err => console.log('Connection Error: ', err));\n\t *\n\t * await endb.set('foo', 'bar'); // true\n\t * await endb.set('exists', true); // true\n\t * await endb.set('num', 10); // true\n\t * await endb.math('num', 'add', 40); // true\n\t * await endb.get('foo'); // 'bar'\n\t * await endb.get('exists'); // true\n\t * await endb.all(); // { ... }\n\t * await endb.has('foo'); // true\n\t * await endb.has('bar'); // false\n\t * await endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\n\t * await endb.delete('foo'); // true\n\t * await endb.clear(); // undefined\n\t */",
    "meta": {
      "range": [
        2218,
        2717
      ],
      "filename": "index.js",
      "lineno": 59,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002210",
        "name": "Endb",
        "type": "MethodDefinition",
        "paramnames": [
          "uri",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "kind": "class",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The connection string URI.",
        "name": "uri"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "The options for the database.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the database.",
        "name": "options.namespace"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "Util#stringify",
        "description": "A custom serialization function.",
        "name": "options.serialize"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "Util#parse",
        "description": "A custom deserialization function.",
        "name": "options.deserialize"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The adapter to be used.",
        "name": "options.adapter"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the collection. (only for MongoDB)",
        "name": "options.collection"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the table. (only for SQL adapters)",
        "name": "options.table"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 255,
        "description": "The size of the key. (only for SQL adapters)",
        "name": "options.keySize"
      }
    ],
    "examples": [
      "const endb = new Endb();\nconst endb = new Endb({\n    namespace: 'endb',\n    serialize: JSON.stringify,\n    deserialize: JSON.parse\n});\nconst endb = new Endb('leveldb://path/to/database');\nconst endb = new Endb('mongodb://user:pass@localhost:27017/dbname');\nconst endb = new Endb('mysql://user:pass@localhost:3306/dbname');\nconst endb = new Endb('postgresql://user:pass@localhost:5432/dbname');\nconst endb = new Endb('redis://user:pass@localhost:6379');\nconst endb = new Endb('sqlite://path/to/database.sqlite');\n\n// Handles database connection error\nendb.on('error', err => console.log('Connection Error: ', err));\n\nawait endb.set('foo', 'bar'); // true\nawait endb.set('exists', true); // true\nawait endb.set('num', 10); // true\nawait endb.math('num', 'add', 40); // true\nawait endb.get('foo'); // 'bar'\nawait endb.get('exists'); // true\nawait endb.all(); // { ... }\nawait endb.has('foo'); // true\nawait endb.has('bar'); // false\nawait endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\nawait endb.delete('foo'); // true\nawait endb.clear(); // undefined"
    ],
    "name": "Endb",
    "longname": "Endb",
    "scope": "global",
    "undocumented": true,
    "$longname": "Endb",
    "$kind": "constructor",
    "$docmaLink": "?api#Endb"
  },
  {
    "comment": "/**\n\t * @constructor\n\t * @param {string} [uri=undefined] The connection string URI.\n\t * @param {Object} [options={}] The options for the database.\n\t * @param {string} [options.namespace=endb] The name of the database.\n\t * @param {Function} [options.serialize=Util#stringify] A custom serialization function.\n\t * @param {Function} [options.deserialize=Util#parse] A custom deserialization function.\n\t * @param {string} [options.adapter] The adapter to be used.\n\t * @param {string} [options.collection=endb] The name of the collection. (only for MongoDB)\n\t * @param {string} [options.table=endb] The name of the table. (only for SQL adapters)\n\t * @param {number} [options.keySize=255] The size of the key. (only for SQL adapters)\n\t * @example\n\t * const endb = new Endb();\n\t * const endb = new Endb({\n\t *     namespace: 'endb',\n\t *     serialize: JSON.stringify,\n\t *     deserialize: JSON.parse\n\t * });\n\t * const endb = new Endb('leveldb://path/to/database');\n\t * const endb = new Endb('mongodb://user:pass@localhost:27017/dbname');\n\t * const endb = new Endb('mysql://user:pass@localhost:3306/dbname');\n\t * const endb = new Endb('postgresql://user:pass@localhost:5432/dbname');\n\t * const endb = new Endb('redis://user:pass@localhost:6379');\n\t * const endb = new Endb('sqlite://path/to/database.sqlite');\n\t *\n\t * // Handles database connection error\n\t * endb.on('error', err => console.log('Connection Error: ', err));\n\t *\n\t * await endb.set('foo', 'bar'); // true\n\t * await endb.set('exists', true); // true\n\t * await endb.set('num', 10); // true\n\t * await endb.math('num', 'add', 40); // true\n\t * await endb.get('foo'); // 'bar'\n\t * await endb.get('exists'); // true\n\t * await endb.all(); // { ... }\n\t * await endb.has('foo'); // true\n\t * await endb.has('bar'); // false\n\t * await endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\n\t * await endb.delete('foo'); // true\n\t * await endb.clear(); // undefined\n\t */",
    "meta": {
      "range": [
        2218,
        2717
      ],
      "filename": "index.js",
      "lineno": 59,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002210",
        "name": "Endb",
        "type": "MethodDefinition",
        "paramnames": [
          "uri",
          "options"
        ]
      }
    },
    "name": "Endb",
    "longname": "Endb",
    "kind": "class",
    "examples": [
      "const endb = new Endb();\nconst endb = new Endb({\n    namespace: 'endb',\n    serialize: JSON.stringify,\n    deserialize: JSON.parse\n});\nconst endb = new Endb('leveldb://path/to/database');\nconst endb = new Endb('mongodb://user:pass@localhost:27017/dbname');\nconst endb = new Endb('mysql://user:pass@localhost:3306/dbname');\nconst endb = new Endb('postgresql://user:pass@localhost:5432/dbname');\nconst endb = new Endb('redis://user:pass@localhost:6379');\nconst endb = new Endb('sqlite://path/to/database.sqlite');\n\n// Handles database connection error\nendb.on('error', err => console.log('Connection Error: ', err));\n\nawait endb.set('foo', 'bar'); // true\nawait endb.set('exists', true); // true\nawait endb.set('num', 10); // true\nawait endb.math('num', 'add', 40); // true\nawait endb.get('foo'); // 'bar'\nawait endb.get('exists'); // true\nawait endb.all(); // { ... }\nawait endb.has('foo'); // true\nawait endb.has('bar'); // false\nawait endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\nawait endb.delete('foo'); // true\nawait endb.clear(); // undefined"
    ],
    "scope": "global",
    "classdesc": "Simple key-value database with cache and multi adapter support.",
    "augments": [
      "EventEmitter"
    ],
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The connection string URI.",
        "name": "uri"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "defaultvalue": "{}",
        "description": "The options for the database.",
        "name": "options"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the database.",
        "name": "options.namespace"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "Util#stringify",
        "description": "A custom serialization function.",
        "name": "options.serialize"
      },
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "optional": true,
        "defaultvalue": "Util#parse",
        "description": "A custom deserialization function.",
        "name": "options.deserialize"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "description": "The adapter to be used.",
        "name": "options.adapter"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the collection. (only for MongoDB)",
        "name": "options.collection"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "optional": true,
        "defaultvalue": "endb",
        "description": "The name of the table. (only for SQL adapters)",
        "name": "options.table"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "optional": true,
        "defaultvalue": 255,
        "description": "The size of the key. (only for SQL adapters)",
        "name": "options.keySize"
      }
    ],
    "$longname": "Endb",
    "$kind": "constructor",
    "$docmaLink": "?api#Endb"
  },
  {
    "comment": "/**\n\t * Gets all the elements from the database.\n\t * @returns {Promise<any[]>} All the elements from the database.\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar');\n\t * await endb.set('en', 'db');\n\t *\n\t * await endb.all(); // [ { key: 'foo', value: 'bar' }, { key: 'en', value: 'db' } ]\n\t */",
    "meta": {
      "range": [
        3043,
        3512
      ],
      "filename": "index.js",
      "lineno": 93,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002316",
        "name": "Endb#all",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Gets all the elements from the database.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<Array.<any>>"
          ]
        },
        "description": "All the elements from the database."
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar');\nawait endb.set('en', 'db');\n\nawait endb.all(); // [ { key: 'foo', value: 'bar' }, { key: 'en', value: 'db' } ]"
    ],
    "name": "all",
    "longname": "Endb#all",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "$longname": "Endb#all",
    "$kind": "method",
    "$docmaLink": "?api#Endb#all"
  },
  {
    "comment": "/**\n\t * Clears all elements from the database.\n\t * @returns {Promise<undefined>} Returns undefined\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo','bar');\n\t * await endb.set('key', 'val');\n\t *\n\t * await endb.clear(); // true\n\t *\n\t * await endb.has('foo');\n\t */",
    "meta": {
      "range": [
        3800,
        3879
      ],
      "filename": "index.js",
      "lineno": 129,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002401",
        "name": "Endb#clear",
        "type": "MethodDefinition",
        "paramnames": []
      },
      "vars": {
        "": null
      }
    },
    "description": "Clears all elements from the database.",
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<undefined>"
          ]
        },
        "description": "Returns undefined"
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo','bar');\nawait endb.set('key', 'val');\n\nawait endb.clear(); // true\n\nawait endb.has('foo');"
    ],
    "name": "clear",
    "longname": "Endb#clear",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "params": [],
    "$longname": "Endb#clear",
    "$kind": "method",
    "$docmaLink": "?api#Endb#clear"
  },
  {
    "comment": "/**\n\t * Removes the element from the database by key.\n\t * @param {string|string[]} key The key(s) of the element to remove from the database.\n\t * @returns {Promise<boolean|boolean[]>} `true` if the element(s) in the database existed and has been deleted, or `false` if the element(s) does not exist or has not been deleted.\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar'); // true\n\t *\n\t * await endb.delete('foo'); // true\n\t * await endb.delete(['foo', 'fizz']); // [ true, false ]\n\t */",
    "meta": {
      "range": [
        4401,
        4659
      ],
      "filename": "index.js",
      "lineno": 145,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002422",
        "name": "Endb#delete",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Removes the element from the database by key.",
    "params": [
      {
        "type": {
          "names": [
            "string",
            "Array.<string>"
          ]
        },
        "description": "The key(s) of the element to remove from the database.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<(boolean|Array.<boolean>)>"
          ]
        },
        "description": "`true` if the element(s) in the database existed and has been deleted, or `false` if the element(s) does not exist or has not been deleted."
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar'); // true\n\nawait endb.delete('foo'); // true\nawait endb.delete(['foo', 'fizz']); // [ true, false ]"
    ],
    "name": "delete",
    "longname": "Endb#delete",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "$longname": "Endb#delete",
    "$kind": "method",
    "$docmaLink": "?api#Endb#delete"
  },
  {
    "comment": "/**\n\t * Finds a single item where the given function returns a truthy value.\n\t * Behaves like {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find Array.prototype.find}.\n\t * The database elements is mapped by their `key`. If you want to find an element by key, you should use the `get` method instead.\n\t * See {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get MDN} for more details.\n\t * @param {Function} fn The function to execute on each value in the element.\n\t * @param {*} [thisArg] Object to use as `this` inside callback.\n\t * @returns {Promise<Object<*>|undefined>} The first element in the database that satisfies the provided testing function. Otherwise `undefined` is returned\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar');\n\t * await endb.set('profile', {\n\t *   id: 1234567890,\n\t *   username: 'user',\n\t *   verified: true,\n\t *   nil: null,\n\t *   hobbies: ['programming']\n\t * });\n\t *\n\t * await endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\n\t * await endb.find(v => v.verified === true); // { key: 'profile', value: { ... } }\n\t * await endb.find(v => v.desc === 'desc'); // undefined\n\t */",
    "meta": {
      "range": [
        6096,
        6363
      ],
      "filename": "index.js",
      "lineno": 193,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002518",
        "name": "Endb#find",
        "type": "MethodDefinition",
        "paramnames": [
          "fn",
          "thisArg"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Finds a single item where the given function returns a truthy value.\nBehaves like {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/find Array.prototype.find}.\nThe database elements is mapped by their `key`. If you want to find an element by key, you should use the `get` method instead.\nSee {@link https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Map/get MDN} for more details.",
    "params": [
      {
        "type": {
          "names": [
            "function"
          ]
        },
        "description": "The function to execute on each value in the element.",
        "name": "fn"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "optional": true,
        "description": "Object to use as `this` inside callback.",
        "name": "thisArg"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<(Object.<*>|undefined)>"
          ]
        },
        "description": "The first element in the database that satisfies the provided testing function. Otherwise `undefined` is returned"
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar');\nawait endb.set('profile', {\n  id: 1234567890,\n  username: 'user',\n  verified: true,\n  nil: null,\n  hobbies: ['programming']\n});\n\nawait endb.find(v => v === 'bar'); // { key: 'foo', value: 'bar' }\nawait endb.find(v => v.verified === true); // { key: 'profile', value: { ... } }\nawait endb.find(v => v.desc === 'desc'); // undefined"
    ],
    "name": "find",
    "longname": "Endb#find",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#find",
    "$kind": "method",
    "$docmaLink": "?api#Endb#find"
  },
  {
    "comment": "/**\n\t * Gets the value of an element from the database.\n\t * @param {string} key The key of the element to return from the database.\n\t * @returns {Promise<*>} The value of the element, or `undefined` if the element cannot be found in the database.\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar');\n\t * await endb.get('bar'); // undefined\n\t * await endb.get('foo'); // 'bar'\n\t */",
    "meta": {
      "range": [
        6775,
        7090
      ],
      "filename": "index.js",
      "lineno": 219,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002568",
        "name": "Endb#get",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Gets the value of an element from the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to return from the database.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<*>"
          ]
        },
        "description": "The value of the element, or `undefined` if the element cannot be found in the database."
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar');\nawait endb.get('bar'); // undefined\nawait endb.get('foo'); // 'bar'"
    ],
    "name": "get",
    "longname": "Endb#get",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "$longname": "Endb#get",
    "$kind": "method",
    "$docmaLink": "?api#Endb#get"
  },
  {
    "comment": "/**\n\t * Checks whether an element, by key, exists in the database or not.\n\t * @param {string} key The key of the element to test for presence in the database.\n\t * @returns {Promise<boolean>} `true` if an element, by key, exists in the database, otherwise `false`.\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar');\n\t *\n\t * await endb.has('bar'); // true\n\t * await endb.has('baz'); // false\n\t */",
    "meta": {
      "range": [
        7518,
        7743
      ],
      "filename": "index.js",
      "lineno": 244,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002634",
        "name": "Endb#has",
        "type": "MethodDefinition",
        "paramnames": [
          "key"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Checks whether an element, by key, exists in the database or not.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to test for presence in the database.",
        "name": "key"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<boolean>"
          ]
        },
        "description": "`true` if an element, by key, exists in the database, otherwise `false`."
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar');\n\nawait endb.has('bar'); // true\nawait endb.has('baz'); // false"
    ],
    "name": "has",
    "longname": "Endb#has",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#has",
    "$kind": "method",
    "$docmaLink": "?api#Endb#has"
  },
  {
    "comment": "/**\n\t * Performs a mathematical operation on the element in the database.\n\t * @param {string} key The key of the element.\n\t * @param {string} operation The mathematical operationto execute.\n\t * Possible operations: addition, subtraction, multiply, division, exp, and module.\n\t * @param {number} operand The operand of the operation\n\t * @returns {Promise<true>} Returns true.\n\t * @example\n\t * Endb.math('key', 'add', 100).then(console.log).catch(console.error);\n\t *\n\t * await Endb.math('key', 'add', 100);\n\t * await Endb.math('key', 'div', 5);\n\t * await Endb.math('key', 'subtract', 15);\n\t * const element = await Endb.get('key');\n\t * console.log(element); // 5\n\t *\n\t * const operations = ['add', 'sub', 'div', 'mult', 'exp', 'mod'];\n\t * operations.forEach(operation => {\n\t *   await Endb.math('key', operation, 100);\n\t * });\n\t */",
    "meta": {
      "range": [
        9451,
        9751
      ],
      "filename": "index.js",
      "lineno": 302,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002784",
        "name": "Endb#math",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "operation",
          "operand"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Performs a mathematical operation on the element in the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The mathematical operationto execute.\nPossible operations: addition, subtraction, multiply, division, exp, and module.",
        "name": "operation"
      },
      {
        "type": {
          "names": [
            "number"
          ]
        },
        "description": "The operand of the operation",
        "name": "operand"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<true>"
          ]
        },
        "description": "Returns true."
      }
    ],
    "examples": [
      "Endb.math('key', 'add', 100).then(console.log).catch(console.error);\n\nawait Endb.math('key', 'add', 100);\nawait Endb.math('key', 'div', 5);\nawait Endb.math('key', 'subtract', 15);\nconst element = await Endb.get('key');\nconsole.log(element); // 5\n\nconst operations = ['add', 'sub', 'div', 'mult', 'exp', 'mod'];\noperations.forEach(operation => {\n  await Endb.math('key', operation, 100);\n});"
    ],
    "name": "math",
    "longname": "Endb#math",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "async": true,
    "$longname": "Endb#math",
    "$kind": "method",
    "$docmaLink": "?api#Endb#math"
  },
  {
    "comment": "/**\n\t * Creates multiple instances of Endb.\n\t * @param {string[]} names An array of strings. Each element will create new instance.\n\t * @param {Object} [options] The options for the instances.\n\t * @returns {Object<Endb>} An object containing created instances.\n\t * @example\n\t * const { users, members } = Endb.multi(['users', 'members']);\n\t * // With options\n\t * const { users, members } = Endb.multi(['users', 'members'], {\n\t *     adapter: 'sqlite'\n\t * });\n\t *\n\t * await users.set('foo', 'bar');\n\t * await members.set('bar', 'foo');\n\t */",
    "meta": {
      "range": [
        10295,
        10452
      ],
      "filename": "index.js",
      "lineno": 330,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100002842",
        "name": "Endb.multi",
        "type": "MethodDefinition",
        "paramnames": [
          "names",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Creates multiple instances of Endb.",
    "params": [
      {
        "type": {
          "names": [
            "Array.<string>"
          ]
        },
        "description": "An array of strings. Each element will create new instance.",
        "name": "names"
      },
      {
        "type": {
          "names": [
            "Object"
          ]
        },
        "optional": true,
        "description": "The options for the instances.",
        "name": "options"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Object.<Endb>"
          ]
        },
        "description": "An object containing created instances."
      }
    ],
    "examples": [
      "const { users, members } = Endb.multi(['users', 'members']);\n// With options\nconst { users, members } = Endb.multi(['users', 'members'], {\n    adapter: 'sqlite'\n});\n\nawait users.set('foo', 'bar');\nawait members.set('bar', 'foo');"
    ],
    "name": "multi",
    "longname": "Endb.multi",
    "kind": "function",
    "memberof": "Endb",
    "scope": "static",
    "$longname": "Endb.multi",
    "$kind": "method",
    "$docmaLink": "?api#Endb.multi"
  },
  {
    "comment": "/**\n\t * Sets an element, key and value, to the database.\n\t * @param {string} key The key of the element to set to the database.\n\t * @param {*} value The value of the element to set to the database.\n\t * @returns {Promise<true>} Returns `true`.\n\t * @example\n\t * const endb = new Endb();\n\t *\n\t * await endb.set('foo', 'bar'); // true\n\t * await endb.set('exists', false);\n\t * await endb.set('profile', {\n\t *   id: 1234567890,\n\t *   username: 'user',\n\t *   verified: true,\n\t *   nil: null,\n\t *   hobbies: ['programming']\n\t * });\n\t */",
    "meta": {
      "range": [
        11919,
        12139
      ],
      "filename": "index.js",
      "lineno": 394,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100003009",
        "name": "Endb#set",
        "type": "MethodDefinition",
        "paramnames": [
          "key",
          "value"
        ]
      },
      "vars": {
        "": null
      }
    },
    "description": "Sets an element, key and value, to the database.",
    "params": [
      {
        "type": {
          "names": [
            "string"
          ]
        },
        "description": "The key of the element to set to the database.",
        "name": "key"
      },
      {
        "type": {
          "names": [
            "*"
          ]
        },
        "description": "The value of the element to set to the database.",
        "name": "value"
      }
    ],
    "returns": [
      {
        "type": {
          "names": [
            "Promise.<true>"
          ]
        },
        "description": "Returns `true`."
      }
    ],
    "examples": [
      "const endb = new Endb();\n\nawait endb.set('foo', 'bar'); // true\nawait endb.set('exists', false);\nawait endb.set('profile', {\n  id: 1234567890,\n  username: 'user',\n  verified: true,\n  nil: null,\n  hobbies: ['programming']\n});"
    ],
    "name": "set",
    "longname": "Endb#set",
    "kind": "function",
    "memberof": "Endb",
    "scope": "instance",
    "$longname": "Endb#set",
    "$kind": "method",
    "$docmaLink": "?api#Endb#set"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        191,
        727
      ],
      "filename": "leveldb.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100000035",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "uri",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        212,
        964
      ],
      "filename": "mongodb.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100000311",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "url",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        177,
        601
      ],
      "filename": "mysql.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100000677",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        203,
        694
      ],
      "filename": "nedb.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100000793",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "uri",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        167,
        537
      ],
      "filename": "postgres.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100001107",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        193,
        747
      ],
      "filename": "redis.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100001209",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "uri",
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        200,
        929
      ],
      "filename": "sql.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100001563",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "",
    "meta": {
      "range": [
        173,
        772
      ],
      "filename": "sqlite.js",
      "lineno": 8,
      "columnno": 1,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src\\adapters",
      "code": {
        "id": "astnode100002070",
        "name": "module.exports",
        "type": "MethodDefinition",
        "paramnames": [
          "options"
        ]
      },
      "vars": {
        "": null
      }
    },
    "undocumented": true,
    "name": "exports",
    "longname": "module.exports#module.exports",
    "kind": "class",
    "memberof": "module.exports#module",
    "scope": "static",
    "params": [],
    "$longname": "module.exports#module.exports",
    "$kind": "constructor",
    "$docmaLink": "?api#module.exports#module.exports"
  },
  {
    "comment": "/**\n * Utilities for Endb.\n */",
    "meta": {
      "range": [
        46,
        4217
      ],
      "filename": "util.js",
      "lineno": 6,
      "columnno": 0,
      "path": "C:\\Users\\chroventer\\projects\\endb\\src",
      "code": {
        "id": "astnode100003112",
        "name": "Util",
        "type": "ClassDeclaration",
        "paramnames": []
      }
    },
    "classdesc": "Utilities for Endb.",
    "name": "Util",
    "longname": "Util",
    "kind": "class",
    "scope": "global",
    "$longname": "Util",
    "$kind": "class",
    "$docmaLink": "?api#Util",
    "$members": [
      {
        "comment": "/**\n\t * Adds the namespace as a prefix to the key.\n\t * @param {string} key The key of an element.\n\t * @param {string} namespace The namespace of the database.\n\t */",
        "meta": {
          "range": [
            225,
            375
          ],
          "filename": "util.js",
          "lineno": 12,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003115",
            "name": "Util.addKeyPrefix",
            "type": "MethodDefinition",
            "paramnames": [
              "key",
              "namespace"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Adds the namespace as a prefix to the key.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The key of an element.",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The namespace of the database.",
            "name": "namespace"
          }
        ],
        "name": "addKeyPrefix",
        "longname": "Util.addKeyPrefix",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.addKeyPrefix",
        "$kind": "method",
        "$docmaLink": "?api#Util.addKeyPrefix"
      },
      {
        "comment": "/**\n\t * Checks whether a value is buffer-like or not.\n\t * @param {*} x The value to check.\n\t * @return {boolean}\n\t */",
        "meta": {
          "range": [
            497,
            646
          ],
          "filename": "util.js",
          "lineno": 25,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003148",
            "name": "Util.isBufferLike",
            "type": "MethodDefinition",
            "paramnames": [
              "x"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether a value is buffer-like or not.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            }
          }
        ],
        "name": "isBufferLike",
        "longname": "Util.isBufferLike",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.isBufferLike",
        "$kind": "method",
        "$docmaLink": "?api#Util.isBufferLike"
      },
      {
        "comment": "/**\n\t * Checks whether a value is an object or not.\n\t * @param {*} x The value to check.\n\t * @return {boolean}\n\t */",
        "meta": {
          "range": [
            766,
            835
          ],
          "filename": "util.js",
          "lineno": 38,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003180",
            "name": "Util.isObject",
            "type": "MethodDefinition",
            "paramnames": [
              "x"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Checks whether a value is an object or not.",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to check.",
            "name": "x"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "boolean"
              ]
            }
          }
        ],
        "name": "isObject",
        "longname": "Util.isObject",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.isObject",
        "$kind": "method",
        "$docmaLink": "?api#Util.isObject"
      },
      {
        "comment": "/**\n\t * Parses a JSON string, constructing the JavaScript value or object described by the string.\n\t * @param {string} text The string to parse as JSON.\n\t * @return {object} The `Object` corresponding to the given JSON text.\n\t */",
        "meta": {
          "range": [
            1747,
            2170
          ],
          "filename": "util.js",
          "lineno": 72,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003270",
            "name": "Util.parse",
            "type": "MethodDefinition",
            "paramnames": [
              "text"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Parses a JSON string, constructing the JavaScript value or object described by the string.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The string to parse as JSON.",
            "name": "text"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "object"
              ]
            },
            "description": "The `Object` corresponding to the given JSON text."
          }
        ],
        "name": "parse",
        "longname": "Util.parse",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.parse",
        "$kind": "method",
        "$docmaLink": "?api#Util.parse"
      },
      {
        "comment": "/**\n\t * Removes the namespace as a prefix from a key.\n\t * @param {string} key The key of an element.\n\t * @param {*} namespace The namespace of the database.\n\t */",
        "meta": {
          "range": [
            3000,
            3086
          ],
          "filename": "util.js",
          "lineno": 135,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003425",
            "name": "Util.removeKeyPrefix",
            "type": "MethodDefinition",
            "paramnames": [
              "key",
              "namespace"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Removes the namespace as a prefix from a key.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The key of an element.",
            "name": "key"
          },
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The namespace of the database.",
            "name": "namespace"
          }
        ],
        "name": "removeKeyPrefix",
        "longname": "Util.removeKeyPrefix",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.removeKeyPrefix",
        "$kind": "method",
        "$docmaLink": "?api#Util.removeKeyPrefix"
      },
      {
        "comment": "/**\n\t * Safely import modules from `node_modules`; local module and JSOn can be imported using a relative path.\n\t * @param {string} id The name or path of the module.\n\t * @return {*} Exported module content.\n\t */",
        "meta": {
          "range": [
            3303,
            3481
          ],
          "filename": "util.js",
          "lineno": 144,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003441",
            "name": "Util.safeRequire",
            "type": "MethodDefinition",
            "paramnames": [
              "id"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Safely import modules from `node_modules`; local module and JSOn can be imported using a relative path.",
        "params": [
          {
            "type": {
              "names": [
                "string"
              ]
            },
            "description": "The name or path of the module.",
            "name": "id"
          }
        ],
        "returns": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "Exported module content."
          }
        ],
        "name": "safeRequire",
        "longname": "Util.safeRequire",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.safeRequire",
        "$kind": "method",
        "$docmaLink": "?api#Util.safeRequire"
      },
      {
        "comment": "/**\n\t * Converts a JavaScript object or value to a JSON string\n\t * @param {*} value The value to convert to a JSON string.\n\t * @param {string|number} [space] A `String` or `Number` object that's used to insert white space into the output JSON string for readability purposes.\n\t * @return A JSON string representing the given value.\n\t */",
        "meta": {
          "range": [
            3822,
            4215
          ],
          "filename": "util.js",
          "lineno": 160,
          "columnno": 1,
          "path": "C:\\Users\\chroventer\\projects\\endb\\src",
          "code": {
            "id": "astnode100003464",
            "name": "Util.stringify",
            "type": "MethodDefinition",
            "paramnames": [
              "value",
              "space"
            ]
          },
          "vars": {
            "": null
          }
        },
        "description": "Converts a JavaScript object or value to a JSON string",
        "params": [
          {
            "type": {
              "names": [
                "*"
              ]
            },
            "description": "The value to convert to a JSON string.",
            "name": "value"
          },
          {
            "type": {
              "names": [
                "string",
                "number"
              ]
            },
            "optional": true,
            "description": "A `String` or `Number` object that's used to insert white space into the output JSON string for readability purposes.",
            "name": "space"
          }
        ],
        "returns": [
          {
            "description": "A JSON string representing the given value."
          }
        ],
        "name": "stringify",
        "longname": "Util.stringify",
        "kind": "function",
        "memberof": "Util",
        "scope": "static",
        "$longname": "Util.stringify",
        "$kind": "method",
        "$docmaLink": "?api#Util.stringify"
      }
    ]
  }
]